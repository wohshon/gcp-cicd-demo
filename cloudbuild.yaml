steps:

- name: 'gcr.io/cloud-builders/docker'
  id: Build docker image - SHORT_SHA
  args: [ 'build', '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ART_REGISTRY}/${_IMAGE}:$SHORT_SHA', '.' ]

- name: 'gcr.io/cloud-builders/docker'
  id: Push docker image with SHA tag
  args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ART_REGISTRY}/${_IMAGE}:$SHORT_SHA']


- name: 'google/cloud-sdk:latest'
  id: get digest
  entrypoint: 'sh'
  args:
  - -xe
  - -c
  - |
    gcloud artifacts docker images list ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ART_REGISTRY}/${_IMAGE} --sort-by='~UPDATE_TIME' --limit=1 --format='value(DIGEST)' > /workspace/digest

- name: 'google/cloud-sdk:latest'
  id: get digest test
  entrypoint: 'sh'
  args:
  - -xe
  - -c
  - |
    echo  "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ART_REGISTRY}/${_IMAGE}@$(cat /workspace/digest)"

- id: attestation
  name: 'google/cloud-sdk:latest'
  entrypoint: 'sh'
  args:
  - -xe
  - -c
  - |
    gcloud beta container binauthz attestations sign-and-create \
      --project='$PROJECT_ID' \
      --artifact-url="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ART_REGISTRY}/${_IMAGE}@$(cat /workspace/digest)" \
      --attestor='projects/${PROJECT_ID}/attestors/built-by-cloud-build' \
      --attestor-project='$PROJECT_ID' \
      --keyversion-project='$PROJECT_ID' \
      --keyversion-location='${_REGION}' \
      --keyversion-keyring='attestkeyring-1' \
      --keyversion-key='attestkey' \
      --keyversion='1'

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args: [ '-c', 'ls -la']

# hack
- name: 'google/cloud-sdk:latest'
  id: inject sha
  entrypoint: 'sh'
  args:
  - -xe
  - -c
  - |
    sed -i "s/my-app:latest/my-app@$(cat /workspace/digest)/g" manifests/pipeline/k8s.yaml

- name: 'google/cloud-sdk:latest'
  id: Trigger Cloud Deploy
  entrypoint: 'sh'
  args:
  - -xe
  - -c
  - |
    gcloud config set deploy/region ${_REGION}
    gcloud deploy apply --file clouddeploy-pipeline.yaml
    gcloud deploy releases create ${_IMAGE}-$SHORT_SHA \
                        --delivery-pipeline=my-app-pipeline \
                        --skaffold-file=skaffold.yaml

options:
    requestedVerifyOption: VERIFIED
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ART_REGISTRY}/${_IMAGE}:$SHORT_SHA'
